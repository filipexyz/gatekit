generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectEnvironment {
  production
  staging
  development
  custom
}

enum ApiKeyEnvironment {
  production
  test
  restricted
}

model Project {
  id          String              @id @default(uuid())
  name        String
  slug        String              @unique
  environment ProjectEnvironment  @default(development)
  isDefault   Boolean             @default(false) @map("is_default")
  settings    Json?
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")

  apiKeys           ApiKey[]
  projectPlatforms  ProjectPlatform[]

  @@map("projects")
}

model ApiKey {
  id          String             @id @default(uuid())
  projectId   String             @map("project_id")
  keyHash     String             @unique @map("key_hash")
  keyPrefix   String             @map("key_prefix")
  name        String
  environment ApiKeyEnvironment
  expiresAt   DateTime?          @map("expires_at")
  lastUsedAt  DateTime?          @map("last_used_at")
  revokedAt   DateTime?          @map("revoked_at")
  createdBy   String?            @map("created_by")
  createdAt   DateTime           @default(now()) @map("created_at")

  project     Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  scopes      ApiKeyScope[]
  usage       ApiKeyUsage[]

  @@index([projectId])
  @@index([keyHash])
  @@map("api_keys")
}

model ApiKeyScope {
  apiKeyId String @map("api_key_id")
  scope    String

  apiKey   ApiKey @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@id([apiKeyId, scope])
  @@map("api_key_scopes")
}

model ProjectPlatform {
  id                   String   @id @default(uuid())
  projectId            String   @map("project_id")
  platform             String
  credentialsEncrypted String   @map("credentials_encrypted") @db.Text
  isActive             Boolean  @default(true) @map("is_active")
  testMode             Boolean  @default(false) @map("test_mode")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  project              Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, platform])
  @@index([projectId])
  @@map("project_platforms")
}

model ApiKeyUsage {
  id             String   @id @default(uuid())
  apiKeyId       String   @map("api_key_id")
  endpoint       String
  method         String
  statusCode     Int      @map("status_code")
  responseTimeMs Int      @map("response_time_ms")
  timestamp      DateTime @default(now())
  ipAddress      String   @map("ip_address")

  apiKey         ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@index([apiKeyId])
  @@index([timestamp])
  @@map("api_key_usage")
}